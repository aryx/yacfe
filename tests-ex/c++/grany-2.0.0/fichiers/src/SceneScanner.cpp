#define YY_CHAR unsigned char
#line 1 "/tmp/flex++/tools/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
/* [gcottenc: seems to miss on most GNU/Linux systems, I don't know why...]  #include <osfcn.h> */
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "SceneScanner.l"
#define INITIAL 0
/*******************************************************************************
 *
 * Copyright (C) 1999-2000 by Y. Padioleau, G. Cottenceau, P. Garcia,
 *   G. LeGuelvouit, Y. Zemali, S. Crunchant, X. Michard.
 *
 * Please check out README.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 ******************************************************************************/
/* -------------- declaration section -------------- */
#define YY_SceneScanner_FLEX_SCANNER
/* -------------- rules section -------------- */
#include "../include/SceneScanner.h"
#line 44 "SceneScanner.l"
#line 196 "/tmp/flex++/tools/lib/flexskel.cc"

#define yy___stderr YY_SceneScanner_ERRFILE
#define yy___text YY_SceneScanner_TEXT
#define yy___leng YY_SceneScanner_LENG
#define yy___in YY_SceneScanner_IN
#define yy___out YY_SceneScanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_SceneScanner_INIT_BUFFER( YY_SceneScanner_CURRENT_BUFFER, yy___in ); \
		YY_SceneScanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_SceneScanner_DEBUG != 0
#define yy___flex_debug YY_SceneScanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_SceneScanner_ECHO
#define yy___input YY_SceneScanner_INPUT
#define yy___fatal_error YY_SceneScanner_FATAL_ERROR
#define yy___wrap YY_SceneScanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_SceneScanner_IFILE  *yy_input_file;

    YY_SceneScanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_SceneScanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_SceneScanner_DEBUG != 0
int YY_SceneScanner_DEBUG_FLAG=YY_SceneScanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_SceneScanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_SceneScanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_SceneScanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_SceneScanner_CHAR *yy___text;
int yy___leng;

YY_SceneScanner_IFILE  *yy___in = (YY_SceneScanner_IFILE  *) 0;
YY_SceneScanner_OFILE *yy___out = (YY_SceneScanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_SceneScanner_CHAR *yy_c_buf_p = (YY_SceneScanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_SceneScanner_CHAR c, YY_SceneScanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_SceneScanner_ECHO_NOCODE
void YY_SceneScanner_CLASS::yy___echo()
{YY_SceneScanner_ECHO_CODE
}
#endif
#ifndef YY_SceneScanner_INPUT_NOCODE
int  YY_SceneScanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_SceneScanner_INPUT_CODE
}
#endif
#ifndef YY_SceneScanner_FATAL_ERROR_NOCODE
void YY_SceneScanner_CLASS::yy___fatal_error(char *msg)
{YY_SceneScanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_SceneScanner_WRAP_NOCODE
int  YY_SceneScanner_CLASS::yy___wrap()
{YY_SceneScanner_WRAP_CODE
}
#endif
void YY_SceneScanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_SceneScanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_SceneScanner_DEBUG != 0
 YY_SceneScanner_DEBUG_FLAG=YY_SceneScanner_DEBUG_INIT;
#endif
}

YY_SceneScanner_CLASS::YY_SceneScanner_CLASS(YY_SceneScanner_CONSTRUCTOR_PARAM) YY_SceneScanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_SceneScanner_CONSTRUCTOR_CODE;
}
YY_SceneScanner_CLASS::~YY_SceneScanner_CLASS() 
{YY_SceneScanner_DESTRUCTOR_CODE;
 if(YY_SceneScanner_CURRENT_BUFFER)
  YY_SceneScanner_DELETE_BUFFER(YY_SceneScanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 42
typedef int yy_state_type;
static const short int yy_accept[242] =
    {   0,
        0,    0,   42,   40,    2,    1,    3,   40,   39,   36,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,    2,    3,    0,    0,    0,    0,
        0,    0,    0,   36,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   33,   38,   38,   38,   38,   38,   38,
       38,   38,    0,    0,    0,    0,    0,    0,   37,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   23,
       24,   38,   38,   38,   29,   38,   38,   38,   38,    0,
        0,    0,    0,    0,    0,   38,   38,   26,   38,   38,
       38,   32,   38,   38,   38,   38,   25,   30,   38,   38,

       38,   31,    0,    0,    0,    0,    0,    0,   38,   38,
       38,   38,   38,   38,   38,   11,   38,   38,   38,   38,
        0,    0,    0,    0,    0,    0,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   28,   38,   34,    0,    0,
        0,    0,    0,    0,    0,   38,   38,   38,   38,   38,
       13,   38,   27,   38,   38,    0,    0,    0,    7,    5,
        0,    8,   38,   38,   38,   38,   38,   38,   10,   38,
        0,    0,    0,    0,   38,   15,   38,   38,   38,   38,
       12,    0,    6,    0,    0,   14,   38,   38,   38,   38,
        0,    4,    0,   38,   38,   38,   16,    9,    0,   38,

       38,   38,   38,   38,    0,   38,   38,   38,   38,   21,
        0,   38,   38,   38,   38,    0,   38,   38,   38,   22,
        0,   38,   17,   38,   35,   38,   38,   18,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   20,   19,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    6,    1,    1,    1,    7,
        7,    1,    4,    7,    4,    8,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    7,    1,
        7,    1,    1,    4,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   20,   32,   33,   34,
        1,    1,    1,    1,   35,    1,   36,   20,   20,   20,

       37,   20,   20,   20,   38,   20,   20,   39,   20,   40,
       41,   42,   20,   43,   20,   44,   20,   20,   20,   20,
       20,   20,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[45] =
    {   0,
        1,    1,    2,    3,    3,    1,    1,    3,    3,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static const short int yy_base[244] =
    {   0,
        0,    0,  266,  267,  263,  267,    0,   32,  267,   38,
      237,    0,   28,  226,  241,  250,  245,  231,  235,  238,
      232,   36,  240,  227,  251,    0,  228,  224,  232,  234,
      215,  223,  237,   42,    0,  232,  233,  213,  202,  199,
      219,  209,  215,    0,  222,  219,  213,  215,   44,   38,
       51,  222,  211,  207,  219,  212,  203,  204,  217,  210,
      196,  202,  178,  182,  201,  187,  203,  190,  193,    0,
        0,  182,  200,  184,    0,  187,  182,  189,  190,  184,
      184,  178,  184,  189,  192,  181,  173,    0,  157,  164,
      173,    0,  170,  167,  180,  177,    0,    0,  182,  181,

      176,    0,  163,  160,  173,  172,  169,  168,  163,  164,
      146,   51,  153,  169,  160,    0,  154,  160,  153,  147,
       60,  155,  145,  144,  156,  155,  150,  142,  129,  144,
      141,  149,  134,  147,  138,    0,  143,    0,  130,  147,
      142,  146,  145,  131,  143,  127,  121,  110,  124,  120,
        0,  120,    0,  131,  124,  125,  118,  115,  267,  267,
      126,  267,  112,  124,   94,  113,  108,  116,    0,  119,
      109,  122,  116,  103,  114,    0,   91,   99,  107,  112,
        0,  101,  267,  113,  111,    0,   86,   92,  107,  103,
      107,  267,   87,   33,   96,   93,    0,  267,   86,   97,

       81,   92,   97,   93,   88,   84,   84,   85,   82,    0,
       89,   86,   79,   80,   83,   82,   71,   80,   71,    0,
       83,   74,    0,   75,  267,   71,   58,    0,   61,   61,
       65,   62,   66,   61,   49,   64,   50,   60,    0,    0,
      267,   86,   71
    } ;

static const short int yy_def[244] =
    {   0,
      241,    1,  241,  241,  241,  241,  242,  241,  241,  241,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  241,  242,  241,  241,  241,  241,
      241,  241,  241,  241,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  241,  241,  241,  241,  241,  241,  241,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  241,
      241,  241,  241,  241,  241,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,

      243,  243,  241,  241,  241,  241,  241,  241,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      241,  241,  241,  241,  241,  241,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  241,  241,
      241,  241,  241,  241,  241,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  241,  241,  241,  241,  241,
      241,  241,  243,  243,  243,  243,  243,  243,  243,  243,
      241,  241,  241,  241,  243,  243,  243,  243,  243,  243,
      243,  241,  241,  241,  241,  243,  243,  243,  243,  243,
      241,  241,  241,  243,  243,  243,  243,  241,  241,  243,

      243,  243,  243,  243,  241,  243,  243,  243,  243,  243,
      241,  243,  243,  243,  243,  241,  243,  243,  243,  243,
      241,  243,  243,  243,  241,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
        0,  241,  241
    } ;

static const short int yy_nxt[312] =
    {   0,
        4,    5,    6,    4,    7,    8,    9,    4,   10,    4,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   12,
       20,   12,   21,   12,   22,   12,   23,   12,   12,   12,
       24,   12,   12,   12,    4,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   27,   33,   34,   28,   37,   33,
       34,   38,   75,   48,  200,  201,   29,  202,   30,   49,
       31,   76,   50,   77,   72,   32,   73,   78,   39,  130,
      139,   74,  229,   35,  240,  131,  239,  238,  237,  236,
      235,  140,  234,  233,  232,  230,   26,  231,   26,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  218,

      217,  216,  215,  214,  213,  212,  211,  210,  209,  208,
      207,  206,  205,  204,  203,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  185,
      184,  183,  182,  181,  180,  179,  178,  177,  176,  175,
      174,  173,  172,  171,  170,  169,  168,  167,  166,  165,
      164,  163,  162,  161,  160,  159,  158,  157,  156,  155,
      154,  153,  152,  151,  150,  149,  148,  147,  146,  145,
      144,  143,  142,  141,  138,  137,  136,  135,  134,  133,
      132,  129,  128,  127,  126,  125,  124,  123,  122,  121,
      120,  119,  118,  117,  116,  115,  114,  113,  112,  111,

      110,  109,  108,  107,  106,  105,  104,  103,  102,  101,
      100,   99,   98,   97,   96,   95,   94,   93,   92,   91,
       90,   89,   88,   87,   86,   59,   85,   84,   83,   82,
       81,   80,   79,   71,   70,   69,   68,   67,   66,   65,
       64,   63,   62,   61,   60,   59,   58,   57,   56,   55,
       54,   53,   25,   52,   51,   47,   46,   45,   44,   43,
       42,   41,   40,   36,   25,  241,    3,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241
    } ;

static const short int yy_chk[312] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    8,   10,   10,    8,   13,   34,
       34,   13,   50,   22,  194,  194,    8,  194,    8,   22,
        8,   50,   22,   51,   49,    8,   49,   51,   13,  112,
      121,   49,  227,  243,  238,  112,  237,  236,  235,  234,
      233,  121,  232,  231,  230,  227,  242,  229,  242,  226,
      224,  222,  221,  219,  218,  217,  216,  215,  214,  213,

      212,  211,  209,  208,  207,  206,  205,  204,  203,  202,
      201,  200,  199,  196,  195,  193,  191,  190,  189,  188,
      187,  185,  184,  182,  180,  179,  178,  177,  175,  174,
      173,  172,  171,  170,  168,  167,  166,  165,  164,  163,
      161,  158,  157,  156,  155,  154,  152,  150,  149,  148,
      147,  146,  145,  144,  143,  142,  141,  140,  139,  137,
      135,  134,  133,  132,  131,  130,  129,  128,  127,  126,
      125,  124,  123,  122,  120,  119,  118,  117,  115,  114,
      113,  111,  110,  109,  108,  107,  106,  105,  104,  103,
      101,  100,   99,   96,   95,   94,   93,   91,   90,   89,

       87,   86,   85,   84,   83,   82,   81,   80,   79,   78,
       77,   76,   74,   73,   72,   69,   68,   67,   66,   65,
       64,   63,   62,   61,   60,   59,   58,   57,   56,   55,
       54,   53,   52,   48,   47,   46,   45,   43,   42,   41,
       40,   39,   38,   37,   36,   33,   32,   31,   30,   29,
       28,   27,   25,   24,   23,   21,   20,   19,   18,   17,
       16,   15,   14,   11,    5,    3,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_SceneScanner_DEBUG != 0
static const short int yy_rule_linenum[41] =
    {   0,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   55,
       56,   57,   58,   59,   61,   62,   64,   65,   66,   67,
       68,   69,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   84,   85,   86,   87,   88,   89
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "/tmp/flex++/tools/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_SceneScanner_LEX_DEFINED
YY_SceneScanner_LEX_RETURN YY_SceneScanner_LEX ( YY_SceneScanner_LEX_PARAM )
YY_SceneScanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_SceneScanner_LEX_RETURN YY_SceneScanner_CLASS::YY_SceneScanner_LEX ( YY_SceneScanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_SceneScanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 

/* % end of prolog */ 
#line 401 "/tmp/flex++/tools/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_SceneScanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_SceneScanner_OFILE_DEFAULT;

	if ( YY_SceneScanner_CURRENT_BUFFER )
	    YY_SceneScanner_INIT_BUFFER( YY_SceneScanner_CURRENT_BUFFER, yy___in );
	else
	    YY_SceneScanner_CURRENT_BUFFER = YY_SceneScanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_SceneScanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "/tmp/flex++/tools/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 242 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 241 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "/tmp/flex++/tools/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "/tmp/flex++/tools/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_SceneScanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_SceneScanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_SceneScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_SceneScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_SceneScanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_SceneScanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 45 "SceneScanner.l"
{ _ligne++; _colonne=1;}
	YY_BREAK
case 2:
#line 46 "SceneScanner.l"
{ /* pour eliminer les blancs */ }
	YY_BREAK
case 3:
#line 47 "SceneScanner.l"
{ }
	YY_BREAK
case 4:
#line 48 "SceneScanner.l"
{ return SceneParser::ENTETEFRONTIERE;  }
	YY_BREAK
case 5:
#line 49 "SceneScanner.l"
{ return SceneParser::ENTETEREGLES; }
	YY_BREAK
case 6:
#line 50 "SceneScanner.l"
{ return SceneParser::ENTETECOLORMAP; }
	YY_BREAK
case 7:
#line 51 "SceneScanner.l"
{ return SceneParser::ENTETEPHASES; }
	YY_BREAK
case 8:
#line 52 "SceneScanner.l"
{ return SceneParser::ENTETEZONAGE; }
	YY_BREAK
case 9:
#line 53 "SceneScanner.l"
{ return SceneParser::ENTETECOLORATION; }
	YY_BREAK
case 10:
#line 55 "SceneScanner.l"
{ return SceneParser::POLYGONE; }
	YY_BREAK
case 11:
#line 56 "SceneScanner.l"
{ return SceneParser::LIGNE; }
	YY_BREAK
case 12:
#line 57 "SceneScanner.l"
{ return SceneParser::RECTANGLE; }
	YY_BREAK
case 13:
#line 58 "SceneScanner.l"
{ return SceneParser::ELLIPSE; }
	YY_BREAK
case 14:
#line 59 "SceneScanner.l"
{ return SceneParser::ARCELLIPSE; }
	YY_BREAK
case 15:
#line 61 "SceneScanner.l"
{ return SceneParser::CLASSIQUE; }
	YY_BREAK
case 16:
#line 62 "SceneScanner.l"
{ return SceneParser::GENERATRICE; }
	YY_BREAK
case 17:
#line 64 "SceneScanner.l"
{ return SceneParser::CNULLE; }
	YY_BREAK
case 18:
#line 65 "SceneScanner.l"
{ return SceneParser::CMEMPHI; }
	YY_BREAK
case 19:
#line 66 "SceneScanner.l"
{ return SceneParser::CPHIINFSOLIDE; }
	YY_BREAK
case 20:
#line 67 "SceneScanner.l"
{ return SceneParser::CPHIINFERIEUR; }
	YY_BREAK
case 21:
#line 68 "SceneScanner.l"
{ return SceneParser::Depl_POSSIBLE; }
	YY_BREAK
case 22:
#line 69 "SceneScanner.l"
{ return SceneParser::Depl_IMPOSSIBLE; }
	YY_BREAK
case 23:
#line 71 "SceneScanner.l"
{ return SceneParser::STRINGNOM; }
	YY_BREAK
case 24:
#line 72 "SceneScanner.l"
{ return SceneParser::PHI; }
	YY_BREAK
case 25:
#line 73 "SceneScanner.l"
{ return SceneParser::POND; }
	YY_BREAK
case 26:
#line 74 "SceneScanner.l"
{ return SceneParser::COUL; }
	YY_BREAK
case 27:
#line 75 "SceneScanner.l"
{ return SceneParser::INERTIE; }
	YY_BREAK
case 28:
#line 76 "SceneScanner.l"
{ return SceneParser::PROPAG; }
	YY_BREAK
case 29:
#line 77 "SceneScanner.l"
{ return SceneParser::PREEXCLUSION; }
	YY_BREAK
case 30:
#line 78 "SceneScanner.l"
{ return SceneParser::POSTEXCLUSION; }
	YY_BREAK
case 31:
#line 79 "SceneScanner.l"
{ return SceneParser::VRAI; }
	YY_BREAK
case 32:
#line 80 "SceneScanner.l"
{ return SceneParser::FAUX; }
	YY_BREAK
case 33:
#line 81 "SceneScanner.l"
{ return SceneParser::HS; }
	YY_BREAK
case 34:
#line 82 "SceneScanner.l"
{ return SceneParser::REGLES; }
	YY_BREAK
case 35:
#line 84 "SceneScanner.l"
{ return SceneParser::TYPEGENERATRICE; }
	YY_BREAK
case 36:
#line 85 "SceneScanner.l"
{ val->entier=atoi((const char*) yytext); return SceneParser::NBR; }
	YY_BREAK
case 37:
#line 86 "SceneScanner.l"
{ val->reel=atof((const char *)yytext);   return SceneParser::NBRREEL; }
	YY_BREAK
case 38:
#line 87 "SceneScanner.l"
{ val->Nom = strdup((const char*)yytext); return SceneParser::NOM; }
	YY_BREAK
case 39:
#line 88 "SceneScanner.l"
{ return yytext[0]; }
	YY_BREAK
case 40:
#line 89 "SceneScanner.l"
{ return SceneParser::TOK_BAD ;}
	YY_BREAK
case 41:
#line 90 "SceneScanner.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 493 "/tmp/flex++/tools/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "/tmp/flex++/tools/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_SceneScanner_DEBUG != 0
#ifndef YY_SceneScanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_SceneScanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_SceneScanner_CHAR *dest = YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_SceneScanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_SceneScanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_SceneScanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_SceneScanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_SceneScanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_SceneScanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_SceneScanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 717 "/tmp/flex++/tools/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 242 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "/tmp/flex++/tools/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_SceneScanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 242 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 241);
#line 755 "/tmp/flex++/tools/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_SceneScanner_CHAR c, register YY_SceneScanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_SceneScanner_CHAR c;
register YY_SceneScanner_CHAR *yy_bp;
#endif
#else
void YY_SceneScanner_CLASS::yyunput( YY_SceneScanner_CHAR c, YY_SceneScanner_CHAR *yy_bp )
#endif

    {
    register YY_SceneScanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_SceneScanner_CHAR *dest =
	    &YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf[YY_SceneScanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_SceneScanner_CHAR *source =
	    &YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_SceneScanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_SceneScanner_CLASS::input()
#endif
    {
    int c;
    YY_SceneScanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_SceneScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_SceneScanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SceneScanner_RESTART( YY_SceneScanner_IFILE  *input_file )
#else
void YY_SceneScanner_RESTART( input_file )
YY_SceneScanner_IFILE  *input_file;
#endif
#else
void YY_SceneScanner_CLASS::YY_SceneScanner_RESTART ( YY_SceneScanner_IFILE  *input_file )
#endif

    {
    YY_SceneScanner_INIT_BUFFER( YY_SceneScanner_CURRENT_BUFFER, input_file );
    YY_SceneScanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SceneScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_SceneScanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_SceneScanner_CLASS::YY_SceneScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_SceneScanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_SceneScanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_SceneScanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_SceneScanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_SceneScanner_CURRENT_BUFFER = new_buffer;
    YY_SceneScanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SceneScanner_LOAD_BUFFER_STATE( void )
#else
void YY_SceneScanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_SceneScanner_CLASS::YY_SceneScanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_SceneScanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_SceneScanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_SceneScanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_SceneScanner_CREATE_BUFFER( YY_SceneScanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_SceneScanner_CREATE_BUFFER( file, size )
YY_SceneScanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_SceneScanner_CLASS::YY_SceneScanner_CREATE_BUFFER( YY_SceneScanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_SceneScanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_SceneScanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_SceneScanner_CREATE_BUFFER()" );

    YY_SceneScanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SceneScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_SceneScanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_SceneScanner_CLASS::YY_SceneScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_SceneScanner_CURRENT_BUFFER )
	YY_SceneScanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SceneScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_SceneScanner_IFILE  *file )
#else
void YY_SceneScanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_SceneScanner_IFILE  *file;
#endif
#else
void YY_SceneScanner_CLASS::YY_SceneScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_SceneScanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 90 "SceneScanner.l"



/* -------------- body section -------------- */
void SceneScanner::beginAction()
{
  _colonne += yyleng;
  DEBUG_COMPILER(cerr << "Lexex:" << yytext << endl);
};
