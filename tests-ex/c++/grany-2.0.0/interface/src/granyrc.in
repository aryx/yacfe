# pixmap_path "<dir 1>:<dir 2>:<dir 3>:..."
#

pixmap_path "~/.grany/pixmaps:@prefix@/share/@PACKAGE@"


## pad : #
## pad : # style &lt;name> [= &lt;name>]
## pad : # {
## pad : #   &lt;option>
## pad : # }
## pad : #
## pad : # widget &lt;widget_set> style &lt;style_name>
## pad : # widget_class &lt;widget_class_set> style &lt;style_name>
## pad : 
## pad : 
## pad : # Here is a list of all the possible states.  Note that some do not apply to
## pad : # certain widgets.
## pad : #
## pad : # NORMAL - The normal state of a widget, without the mouse over top of
## pad : # it, and not being pressed etc.
## pad : #
## pad : # PRELIGHT - When the mouse is over top of the widget, colors defined
## pad : # using this state will be in effect.
## pad : #
## pad : # ACTIVE - When the widget is pressed or clicked it will be active, and
## pad : # the attributes assigned by this tag will be in effect.
## pad : #
## pad : # INSENSITIVE - When a widget is set insensitive, and cannot be
## pad : # activated, it will take these attributes.
## pad : #
## pad : # SELECTED - When an object is selected, it takes these attributes.
## pad : #
## pad : # Given these states, we can set the attributes of the widgets in each of
## pad : # these states using the following directives.
## pad : #
## pad : # fg - Sets the foreground color of a widget.
## pad : # fg - Sets the background color of a widget.
## pad : # bg_pixmap - Sets the background of a widget to a tiled pixmap.
## pad : # font - Sets the font to be used with the given widget.
## pad : #
## pad : 
## pad : # This sets a style called "button".  The name is not really important, as
## pad : # it is assigned to the actual widgets at the bottom of the file.
## pad : 
## pad : style "window"
## pad : {
## pad :   #This sets the padding around the window to the pixmap specified.
## pad :   #bg_pixmap[&lt;STATE>] = "&lt;pixmap filename>"
## pad :   bg_pixmap[NORMAL] = "warning.xpm"
## pad : }
## pad : 
## pad : style "scale"
## pad : {
## pad :   #Sets the foreground color (font color) to red when in the "NORMAL"
## pad :   #state.
## pad :   
## pad :   fg[NORMAL] = { 1.0, 0, 0 }
## pad :   
## pad :   #Sets the background pixmap of this widget to that of its parent.
## pad :   bg_pixmap[NORMAL] = "&lt;parent>"
## pad : }
## pad : 
## pad : style "button"
## pad : {
## pad :   # This shows all the possible states for a button.  The only one that
## pad :   # doesn't apply is the SELECTED state.
## pad :   
## pad :   fg[PRELIGHT] = { 0, 1.0, 1.0 }
## pad :   bg[PRELIGHT] = { 0, 0, 1.0 }
## pad :   bg[ACTIVE] = { 1.0, 0, 0 }
## pad :   fg[ACTIVE] = { 0, 1.0, 0 }
## pad :   bg[NORMAL] = { 1.0, 1.0, 0 }
## pad :   fg[NORMAL] = { .99, 0, .99 }
## pad :   bg[INSENSITIVE] = { 1.0, 1.0, 1.0 }
## pad :   fg[INSENSITIVE] = { 1.0, 0, 1.0 }
## pad : }
## pad : 
## pad : # In this example, we inherit the attributes of the "button" style and then
## pad : # override the font and background color when prelit to create a new
## pad : # "main_button" style.
## pad : 
## pad : style "main_button" = "button"
## pad : {
## pad :   font = "-adobe-helvetica-medium-r-normal--*-100-*-*-*-*-*-*"
## pad :   bg[PRELIGHT] = { 0.75, 0, 0 }
## pad : }
## pad : 
## pad : style "toggle_button" = "button"
## pad : {
## pad :   fg[NORMAL] = { 1.0, 0, 0 }
## pad :   fg[ACTIVE] = { 1.0, 0, 0 }
## pad :   
## pad :   # This sets the background pixmap of the toggle_button to that of its
## pad :   # parent widget (as defined in the application).
## pad :   bg_pixmap[NORMAL] = "&lt;parent>"
## pad : }
## pad : 
## pad : style "text"
## pad : {
## pad :   bg_pixmap[NORMAL] = "marble.xpm"
## pad :   fg[NORMAL] = { 1.0, 1.0, 1.0 }
## pad : }
## pad : 
## pad : style "ruler"
## pad : {
## pad :   font = "-adobe-helvetica-medium-r-normal--*-80-*-*-*-*-*-*"
## pad : }
## pad : 
## pad : # pixmap_path "~/.pixmaps"
## pad : 
## pad : # These set the widget types to use the styles defined above.
## pad : # The widget types are listed in the class hierarchy, but could probably be
## pad : # just listed in this document for the users reference.
## pad : 
## pad : widget_class "GtkWindow" style "window"
## pad : widget_class "GtkDialog" style "window"
## pad : widget_class "GtkFileSelection" style "window"
## pad : widget_class "*Gtk*Scale" style "scale"
## pad : widget_class "*GtkCheckButton*" style "toggle_button"
## pad : widget_class "*GtkRadioButton*" style "toggle_button"
## pad : widget_class "*GtkButton*" style "button"
## pad : widget_class "*Ruler" style "ruler"
## pad : widget_class "*GtkText" style "text"
## pad : 
## pad : # This sets all the buttons that are children of the "main window" to
## pad : # the main_button style.  These must be documented to be taken advantage of.
## pad : widget "main window.*GtkButton*" style "main_button"
