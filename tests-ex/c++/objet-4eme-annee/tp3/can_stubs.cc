//+++++++++++++++++++++++++++++   programme   +++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++   principale  +++++++++++++++++++++++++++++++
//
// can_stubs.cc - Notify and event callback function stubs.
// This file was generated by `gxv++' from `can.G'.
//

#include <stdio.h>
#include <sys/param.h>
#include <sys/types.h>
#include <xview/xview.h>
#include <xview/panel.h>
#include <xview/textsw.h>
#include <xview/xv_xrect.h>
#include "can_ui.h"
#include "fenetre.h"
#include "figures.h"
#include "point.h"
#include "segment.h"
#include "rectangle.h"
#include "carre.h"
#include "cercle.h"


//
// Global object definitions.
//
can_window1_objects	Can_window1;

fenetre * FP;					// pointeur sur la fenetre
						// qui doit etre utiliser dans
						// les methodes des figures

// objets globaux du type figure :


#ifdef MAIN

//
// Instance XV_KEY_DATA key.  An instance is a set of related
// user interface objects.  A pointer to an object's instance
// is stored under this key in every object.  This must be a
// global variable.
//
Attr_attribute	INSTANCE;

void main(int argc, char **argv)
{
	//
	// Initialize XView.
	//
	xv_init(XV_INIT_ARGC_PTR_ARGV, &argc, argv, NULL);
	INSTANCE = xv_unique_key();
	
	//
	// Initialize user interface components.
	// Do NOT edit the object initializations by hand.
	//

//	Can_window1.objects_initialize(NULL);
	
	fenetre F(Can_window1);	// creation d'une fenetre
				// ======================================


	FP = &F;		// initialisation de son pointeur
				// ======================================


	figures::init();	// initialisation de la liste des figures
				// ======================================

				// creation des objets
				// ======================================	
carre K(60,220,40);
segment S(80,200,40,40);
cercle C1(30,300,30);
cercle C2(130,300,30);
rectangle R(40,250,80,30);

	//
	// Turn control over to XView.
	//
	xv_main_loop(Can_window1.window1);
	exit(0);
}

#endif


//
// Notify callback function for `button1'.
//
void
dessiner_touss(Panel_item item, Event *event)
{
	can_window1_objects *ip = (can_window1_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);

	figures * pp = figures::le_premier();	// se positionner en tete

	do	{
		pp->dessiner(FP);		//dessiner l'objet
		}
	while(pp = pp->le_suivant());		// figure suivante
	
}

//
// Notify callback function for `button2'.
//
void
effacer_tous(Panel_item item, Event *event)
{
	can_window1_objects *ip = (can_window1_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
		
	figures * pp = figures::le_premier();	// se positionner en tete

	do	{
		pp->effacer(FP);		//effacer l'objet
		}
	while(pp = pp->le_suivant());		// figure suivante
	
}

//
// Notify callback function for `button3'.
//
void
deplacer_tous(Panel_item item, Event *event)
{
	can_window1_objects *ip = (can_window1_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);

	figures * pp = figures::le_premier();	// se positionner en tete
	int dir = (pp->pos_x() > 300);
	
	for (int i = 0; i < 160; i++)
	{
	 pp = figures::le_premier();
	do	{
		if (dir)			//deplacer l'objet
			pp->deplacer(FP,-2,0);  // vers l'arriere
		else
			pp->deplacer(FP,2,0);   // vers l'avant
		}
	while(pp = pp->le_suivant());		// figure suivante
	}
}

